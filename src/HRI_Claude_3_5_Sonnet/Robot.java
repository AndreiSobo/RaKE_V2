package HRI_Claude_3_5_Sonnet;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Consumer;


public class Robot {
    private int x;
    private int y;
    private int z;
    protected List<ObjectHRI> objects;
    public boolean gripperIsOpen;
    protected ArrayList<Integer> coords;

    public Robot() {
        this.x = 0;
        this.y = 2;
        this.z = 0;
        this.objects = new ArrayList<>();
        this.gripperIsOpen = true;
        this.coords = new ArrayList<>();
    }

    public Robot(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.objects = new ArrayList<>();
        this.gripperIsOpen = true;
        this.coords = new ArrayList<>();
    }

    public int getX() { return this.x; }
    public int getY() { return this.y; }
    public int getZ() { return this.z; }

    public ArrayList<Integer> getPosition() {
        coords.clear();  // Clear previous coordinates
        coords.add(getX());
        coords.add(getY());
        coords.add(getZ());
        System.out.println("Position: (" + this.x + ", " + this.y + ", " + this.z + ")");
        return coords;
    }

    public void moveX(int distance) {
        int newX = this.x + distance;
        checkCollision(newX, this.y, this.z);
        this.x = newX;
        System.out.println("Robot moved on x axis. New position: (" + this.x + ", " + this.y + ", " + this.z + ")");
    }

    public void moveY(int distance) {
        int newY = this.y + distance;
        checkCollision(this.x, newY, this.z);
        this.y = newY;
        System.out.println("Robot moved on y axis. New position: (" + this.x + ", " + this.y + ", " + this.z + ")");
    }

    public void moveZ(int distance) {
        int newZ = this.z + distance;
        checkCollision(this.x, this.y, newZ);
        this.z = newZ;
        System.out.println("Robot moved on z axis. New position: (" + this.x + ", " + this.y + ", " + this.z + ")");
    }

    private void checkCollision(int newX, int newY, int newZ) {
        System.out.println("Checking collision for position: (" + newX + ", " + newY + ", " + newZ + ")");
        System.out.println("Gripper is " + (gripperIsOpen ? "open" : "closed"));
        if (!gripperIsOpen) {
            for (ObjectHRI obj : objects) {
                System.out.println("Comparing with object at: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");
                if (newX == obj.getX() && newY == obj.getY() && newZ == obj.getZ()) {
                    throw new IllegalStateException("Collision detected! Cannot move to object coordinates with closed gripper.");
                }
            }
        }
        System.out.println("No collision detected");
    }

    public void openGripper() {
        this.gripperIsOpen = true;
        System.out.println("Gripper opened.");
    }

    public void closeGripper() {
        checkCollision(this.x, this.y, this.z);
        this.gripperIsOpen = false;
        System.out.println("Gripper closed.");
    }

    public void addObject(ObjectHRI obj) {
        this.objects.add(obj);
    }

    public void returnToOrigin() {
        this.x = 0;
        this.y = 2;
        this.z = 0;
        System.out.println("Robot returned to origin (0, 2, 0)");
    }
    // Adding methods generated by Claude 3.5 Sonnet

    // "pickup object at (3,0,9). Do not return to origin"
    public void pickupObjectAt3_0_9() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(3, 0, 9); // Create object at (3,0,9)
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's position
        this.moveX(3); // Move 3 units along X-axis
        this.moveZ(9); // Move 9 units along Z-axis

        // Prepare to pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        System.out.println("Object picked up from (3, 0, 9).");
        System.out.println("Object's current position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed


    // "pickup object that is 7 cm to the left and 4 cm forward of origin"
    public void pickupObjectLeftAndForward() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(-7, 0, 4); // Create object 7 cm left and 4 cm forward of origin
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's position
        this.moveX(-7); // Move 7 units to the left (negative X direction)
        this.moveZ(4);  // Move 4 units forward (positive Z direction)

        // Prepare to pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        this.returnToOrigin(); // Return to origin as per default behavior

        // Update object's coordinates after returning to origin
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        System.out.println("Object picked up from 7 cm left and 4 cm forward of origin.");
        System.out.println("Object's current position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pickup the object situated 2 cm to the right from origin and move it at coordinates (-2,0,2)"
    public void pickupAndMoveObject() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(2, 0, 0); // Create object 2 cm right of origin
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's position
        this.moveX(2); // Move 2 units to the right

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move the object to (-2,0,2)
        this.moveX(-4); // Move 4 units to the left (from 2 to -2)
        o1.setX(this.getX());

        this.moveZ(2); // Move 2 units forward
        o1.setZ(this.getZ());

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper(); // Release the object
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object picked up from 2 cm right of origin and moved to (-2, 0, 2).");
        System.out.println("Object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "place the object situated at 4,0,1 two cm forward on the ground"
    public void moveAndPlaceObjectForward() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(4, 0, 1); // Create object at (4,0,1)
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's position
        this.moveX(4); // Move 4 units to the right
        this.moveZ(1); // Move 1 unit forward

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move the object 2 cm forward
        this.moveZ(2); // Move 2 units forward
        o1.setZ(this.getZ());

        // Place the object on the ground
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper(); // Release the object
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object moved from (4, 0, 1) to (4, 0, 3) and placed on the ground.");
        System.out.println("Object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "move 2 cm to the left from origin. pickup the object situated on the ground 3 cm to the right from  your position and place it at coordinates (5,0,5). do not return to origin"
    public void complexMovePickupAndPlace() {
        this.returnToOrigin(); // Start from the origin

        // Move 2 cm to the left from origin
        this.moveX(-2);
        System.out.println("Moved 2 cm to the left. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Calculate object position: 3 cm to the right from current position
        int objectX = this.getX() + 3;
        ObjectHRI o1 = new ObjectHRI(objectX, 0, this.getZ());
        this.addObject(o1);

        // Move to the object's position
        this.moveX(3);
        System.out.println("Moved to object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Calculate movement to (5,0,5)
        int moveX = 5 - this.getX();
        int moveZ = 5 - this.getZ();

        // Move to (5,0,5)
        this.moveX(moveX);
        o1.setX(this.getX());
        this.moveZ(moveZ);
        o1.setZ(this.getZ());

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper();
        this.moveY(2); // Raise the arm

        System.out.println("Object picked up and placed at (5, 0, 5).");
        System.out.println("Object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pickup the object situated 2 cm left from origin and place it on the ground 3 cm right from origin"
    public void pickupLeftPlaceRight() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(-2, 0, 0); // Create object 2 cm left of origin
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's position
        this.moveX(-2); // Move 2 units to the left
        System.out.println("Moved to object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the destination (3 cm right from origin)
        this.moveX(5); // Move 5 units to the right (2 to origin + 3 to destination)
        o1.setX(this.getX()); // Update object's X coordinate

        // Place the object on the ground
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper(); // Release the object
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object picked up from 2 cm left of origin and placed 3 cm right of origin.");
        System.out.println("Object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Pickup last object placed and place it on the ground 2 cm to the left. do not lift the arm up after placing"
    public void pickupLastObjectMoveLeft() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(3, 0, 0); // Last object was at (3, 0, 0)
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's position
        this.moveX(3); // Move 3 units to the right
        System.out.println("Moved to object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move 2 cm to the left
        this.moveX(-2);
        o1.setX(this.getX()); // Update object's X coordinate

        // Place the object on the ground
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper(); // Release the object

        // Note: We do not lift the arm after placing, as per instructions

        System.out.println("Object picked up from 3 cm right of origin and placed 2 cm left of that position.");
        System.out.println("Object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "place the object situated at (2,1,2) on the ground 4 cm to the left. Do not return to origin"
    public void moveObjectLeftAndPlace() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(2, 1, 2); // Create object at (2,1,2)
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's position
        this.moveX(2); // Move 2 units to the right
        this.moveY(-1); // Move 1 unit up (object is at y=1, robot starts at y=2)
        this.moveZ(2); // Move 2 units forward
        System.out.println("Moved to object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.closeGripper(); // Grip the object
        this.moveY(1); // Lift the object to y=2 (robot's default height)

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move 4 cm to the left
        this.moveX(-4);
        o1.setX(this.getX()); // Update object's X coordinate

        // Place the object on the ground
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper(); // Release the object
        this.moveY(2); // Raise the arm back to default height

        System.out.println("Object moved from (2, 1, 2) and placed 4 cm to the left on the ground.");
        System.out.println("Object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Take the object at (1,0,1) and place it at (2,0,1). Then take another object at (3,0,3) and place it one cm to the right"
    public void moveTwoObjectsSequence() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(1, 0, 1); // Create first object at (1,0,1)
        ObjectHRI o2 = new ObjectHRI(3, 0, 3); // Create second object at (3,0,3)
        this.addObject(o1);
        this.addObject(o2);

        // Move first object from (1,0,1) to (2,0,1)
        this.moveX(1);
        this.moveZ(1);
        System.out.println("Moved to first object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        this.moveX(1); // Move to (2,0,1)
        o1.setX(this.getX());

        this.moveY(-2); // Lower the arm
        o1.setY(0);
        this.openGripper();
        this.moveY(2); // Raise the arm

        System.out.println("First object moved from (1,0,1) to (2,0,1)");

        // Move second object from (3,0,3) to (4,0,3)
        this.moveX(1);
        this.moveZ(2);
        System.out.println("Moved to second object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        o2.setX(this.getX());
        o2.setY(this.getY());
        o2.setZ(this.getZ());

        this.moveX(1); // Move 1 cm to the right
        o2.setX(this.getX());

        this.moveY(-2); // Lower the arm
        o2.setY(0);
        this.openGripper();
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Second object moved from (3,0,3) to (4,0,3)");
        System.out.println("First object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Second object's final position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Take one object situated at (4,0,2) and place it on top of the object situated at cords (-2,0,3)"
    public void stackObjects() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI o1 = new ObjectHRI(4, 0, 2); // Create first object at (4,0,2)
        ObjectHRI o2 = new ObjectHRI(-2, 0, 3); // Create second object at (-2,0,3)
        this.addObject(o1);
        this.addObject(o2);

        // Move to the first object at (4,0,2)
        this.moveX(4);
        this.moveZ(2);
        System.out.println("Moved to first object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pick up the first object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update first object's coordinates
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the second object at (-2,0,3)
        this.moveX(-6); // Move 6 units to the left (from 4 to -2)
        o1.setX(this.getX());
        this.moveZ(1); // Move 1 unit forward (from 2 to 3)
        o1.setZ(this.getZ());

        System.out.println("Moved to second object. Current position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Place the first object on top of the second object
        this.moveY(-1); // Lower the arm by 1 unit (assuming objects have a height of 1 unit)
        o1.setY(1); // Set the first object's Y coordinate to 1 (on top of the second object)
        this.openGripper();
        this.moveY(1); // Raise the arm back to default height

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("First object stacked on top of second object.");
        System.out.println("First object's final position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Second object's position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pickup the object at (-2,0,2) and move it to coordinates (3,0,2). Then pick it up again and move it 2 cm to the left"
    public void pickupMoveTwice() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj = new ObjectHRI(-2, 0, 2); // Create object at (-2,0,2)
        this.addObject(obj);

        // First movement: Pickup from (-2,0,2) and move to (3,0,2)
        System.out.println("Picking up object from (-2,0,2) and moving to (3,0,2)");

        // Move to the object's initial position
        this.moveX(-2);
        this.moveZ(2);
        System.out.println("Reached object at initial position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update object's coordinates
        obj.setX(this.getX());
        obj.setY(this.getY());
        obj.setZ(this.getZ());

        // Move to (3,0,2)
        this.moveX(5); // Move 5 units to the right (from -2 to 3)
        obj.setX(this.getX());

        // Place the object
        this.moveY(-2); // Lower the arm
        obj.setY(0);
        this.openGripper();
        this.moveY(2); // Raise the arm

        System.out.println("Object placed at: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");

        // Second movement: Pick up again and move 2 cm to the left
        System.out.println("Picking up object again and moving 2 cm to the left");

        // Pick up the object again
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update object's coordinates
        obj.setY(this.getY());

        // Move 2 cm to the left
        this.moveX(-2);
        obj.setX(this.getX());

        // Place the object
        this.moveY(-2); // Lower the arm
        obj.setY(0);
        this.openGripper();
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object movements completed.");
        System.out.println("Object's final position: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Pickup the object 4 cm to the left and place it at coordinates (4,3,2)"
    public void pickupLeftPlaceAtCoordinates() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj = new ObjectHRI(-4, 0, 0); // Create object 4 cm to the left of origin
        this.addObject(obj);

        System.out.println("Picking up object 4 cm to the left and placing it at (4,3,2)");

        // Move to the object's position
        this.moveX(-4);
        System.out.println("Reached object at: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pickup the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update object's coordinates
        obj.setX(this.getX());
        obj.setY(this.getY());
        obj.setZ(this.getZ());

        // Move to (4,3,2)
        this.moveX(8); // Move 8 units to the right (from -4 to 4)
        obj.setX(this.getX());

        this.moveY(1); // Move 1 unit up (from 2 to 3)
        obj.setY(this.getY());

        this.moveZ(2); // Move 2 units forward
        obj.setZ(this.getZ());

        // Place the object
        this.moveY(-3); // Lower the arm to ground level (from 3 to 0)
        obj.setY(0);
        this.openGripper();
        this.moveY(2); // Raise the arm back to default height

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object movement completed.");
        System.out.println("Object's final position: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Object placed on ground.

    // "From origin, draw a square in the air with a side length of 3"
    public void drawSquareInAir() {
        this.returnToOrigin(); // Start from the origin
        System.out.println("Drawing a square in the air with side length 3");

        // Move to starting position (0,2,0) - already there after returnToOrigin()
        System.out.println("Starting position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Draw the square
        // First side: Move 3 units along positive X
        this.moveX(3);
        System.out.println("Moved to: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Second side: Move 3 units along positive Z
        this.moveZ(3);
        System.out.println("Moved to: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Third side: Move 3 units along negative X
        this.moveX(-3);
        System.out.println("Moved to: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Fourth side: Move 3 units along negative Z (back to start)
        this.moveZ(-3);
        System.out.println("Moved to: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        System.out.println("Square drawing completed.");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "There are 3 objects. First is  at coordinates (3,0,1), second is at (4,0,2) and third at (-2,0,2). I want you to pick them and place them on top of each other at coordinates (-5,0,5). The gripper can only hold one object at a time"
    public void stackThreeObjects() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj1 = new ObjectHRI(3, 0, 1);
        ObjectHRI obj2 = new ObjectHRI(4, 0, 2);
        ObjectHRI obj3 = new ObjectHRI(-2, 0, 2);
        this.addObject(obj1);
        this.addObject(obj2);
        this.addObject(obj3);

        System.out.println("Stacking three objects at (-5,0,5)");

        // Helper method to pick up an object
        Runnable pickUpObject = () -> {
            if (!this.gripperIsOpen) {
                this.openGripper();
            }
            this.moveY(-2); // Lower arm to ground level
            this.closeGripper();
            this.moveY(2); // Lift the object
        };

        // Move and stack the first object (obj1)
        this.moveX(3);
        this.moveZ(1);
        pickUpObject.run();
        obj1.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(-8); // Move to X=-5
        this.moveZ(4); // Move to Z=5
        placeObject(0); // Place at ground level
        obj1.setPosition(-5, 0, 5);

        // Move and stack the second object (obj2)
        this.returnToOrigin();
        this.moveX(4);
        this.moveZ(2);
        pickUpObject.run();
        obj2.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(-9); // Move to X=-5
        this.moveZ(3); // Move to Z=5
        placeObject(1); // Place at level 1
        obj2.setPosition(-5, 1, 5);

        // Move and stack the third object (obj3)
        this.returnToOrigin();
        this.moveX(-2);
        this.moveZ(2);
        pickUpObject.run();
        obj3.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(-3); // Move to X=-5
        this.moveZ(3); // Move to Z=5
        placeObject(2); // Place at level 2
        obj3.setPosition(-5, 2, 5);

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Stacking completed.");
        System.out.println("Object 1 final position: (" + obj1.getX() + ", " + obj1.getY() + ", " + obj1.getZ() + ")");
        System.out.println("Object 2 final position: (" + obj2.getX() + ", " + obj2.getY() + ", " + obj2.getZ() + ")");
        System.out.println("Object 3 final position: (" + obj3.getX() + ", " + obj3.getY() + ", " + obj3.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // Helper method to place an object
    private void placeObject(int level) {
        this.moveY(-2 + level); // Lower the arm to the appropriate level
        this.openGripper();
        this.moveY(2 - level); // Raise the arm back to default height
    }


    // "There are 2 objects at coordinates (3,0,2) and (-3,0,2). Can you swap them around"
    public void swapTwoObjects() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj1 = new ObjectHRI(3, 0, 2);
        ObjectHRI obj2 = new ObjectHRI(-3, 0, 2);
        this.addObject(obj1);
        this.addObject(obj2);

        System.out.println("Swapping objects at (3,0,2) and (-3,0,2)");

        // Helper method to pick up an object
        Runnable pickUpObject = () -> {
            if (!this.gripperIsOpen) {
                this.openGripper();
            }
            this.moveY(-2); // Lower arm to ground level
            this.closeGripper();
            this.moveY(2); // Lift the object
        };

        // Helper method to place an object
        Runnable placeObject = () -> {
            this.moveY(-2); // Lower the arm to ground level
            this.openGripper();
            this.moveY(2); // Raise the arm back to default height
        };

        // Move first object to a temporary position
        this.moveX(3);
        this.moveZ(2);
        pickUpObject.run();
        obj1.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(-3); // Move to X=0 (temporary position)
        placeObject.run();
        obj1.setPosition(0, 0, 2);

        // Move second object to first object's original position
        this.moveX(-3);
        pickUpObject.run();
        obj2.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(6); // Move to X=3
        placeObject.run();
        obj2.setPosition(3, 0, 2);

        // Move first object to second object's original position
        this.moveX(-3); // Move back to temporary position
        pickUpObject.run();
        obj1.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(-3); // Move to X=-3
        placeObject.run();
        obj1.setPosition(-3, 0, 2);

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Swapping completed.");
        System.out.println("Object 1 final position: (" + obj1.getX() + ", " + obj1.getY() + ", " + obj1.getZ() + ")");
        System.out.println("Object 2 final position: (" + obj2.getX() + ", " + obj2.getY() + ", " + obj2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Pickup the last two objects moved and place them on top of each other at coords (-5,0,7)"
    // Correctly moving the placeObject method outside of stackLastTwoObjects
    public void stackLastTwoObjects() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj1 = new ObjectHRI(3, 0, 2);  // Object that was last at (3,0,2)
        ObjectHRI obj2 = new ObjectHRI(-3, 0, 2); // Object that was last at (-3,0,2)
        this.addObject(obj1);
        this.addObject(obj2);

        System.out.println("Picking up last two moved objects and stacking them at (-5,0,7)");

        // Correctly using the lambda expression
        Runnable pickUpObject = () -> {
            if (!this.gripperIsOpen) {
                this.openGripper();
            }
            this.moveY(-2); // Lower arm to ground level
            this.closeGripper();
            this.moveY(2); // Lift the object
        };

        // Move and stack the first object (obj1)
        this.moveX(3);
        this.moveZ(2);
        pickUpObject.run();
        obj1.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(-8); // Move to X=-5
        this.moveZ(5); // Move to Z=7
        placeObject(0); // Place at ground level
        obj1.setPosition(-5, 0, 7);

        // Move and stack the second object (obj2)
        this.returnToOrigin();
        this.moveX(-3);
        this.moveZ(2);
        pickUpObject.run();
        obj2.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(-2); // Move to X=-5
        this.moveZ(5); // Move to Z=7
        placeObject(1); // Place at level 1 (on top of the first object)
        obj2.setPosition(-5, 1, 7);

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Stacking completed.");
        System.out.println("Object 1 final position: (" + obj1.getX() + ", " + obj1.getY() + ", " + obj1.getZ() + ")");
        System.out.println("Object 2 final position: (" + obj2.getX() + ", " + obj2.getY() + ", " + obj2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }


    // Passed.

    //"Move the objects at coordinates (1,0,1) and (-2,0,1) to a new position where they will be placed at (5,0,5) and (6,0,5)"
    public void moveTwoObjectsToNewPositions() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj1 = new ObjectHRI(1, 0, 1);
        ObjectHRI obj2 = new ObjectHRI(-2, 0, 1);
        this.addObject(obj1);
        this.addObject(obj2);

        System.out.println("Moving objects to new positions");

        // Helper method to pick up an object
        Runnable pickUpObject = () -> {
            if (!this.gripperIsOpen) {
                this.openGripper();
            }
            this.moveY(-2); // Lower arm to ground level
            this.closeGripper();
            this.moveY(2); // Lift the object
        };

        // Helper method to place an object
        Runnable placeObject = () -> {
            this.moveY(-2); // Lower the arm to ground level
            this.openGripper();
            this.moveY(2); // Raise the arm back to default height
        };

        // Move first object from (1,0,1) to (5,0,5)
        this.moveX(1);
        this.moveZ(1);
        pickUpObject.run();
        obj1.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(4); // Move to X=5
        this.moveZ(4); // Move to Z=5
        placeObject.run();
        obj1.setPosition(5, 0, 5);
        System.out.println("Object 1 moved to: (" + obj1.getX() + ", " + obj1.getY() + ", " + obj1.getZ() + ")");

        // Move second object from (-2,0,1) to (6,0,5)
        this.returnToOrigin();
        this.moveX(-2);
        this.moveZ(1);
        pickUpObject.run();
        obj2.setPosition(this.getX(), this.getY(), this.getZ());
        this.moveX(8); // Move to X=6
        this.moveZ(4); // Move to Z=5
        placeObject.run();
        obj2.setPosition(6, 0, 5);
        System.out.println("Object 2 moved to: (" + obj2.getX() + ", " + obj2.getY() + ", " + obj2.getZ() + ")");

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Moving objects completed.");
        System.out.println("Object 1 final position: (" + obj1.getX() + ", " + obj1.getY() + ", " + obj1.getZ() + ")");
        System.out.println("Object 2 final position: (" + obj2.getX() + ", " + obj2.getY() + ", " + obj2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pickup the object at (1,0,1) and move it to a new Z position at (1,0,5)"
    public void moveObjectAlongZAxis() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj = new ObjectHRI(1, 0, 1);
        this.addObject(obj);

        System.out.println("Moving object from (1,0,1) to (1,0,5)");

        // Move to the object's initial position
        this.moveX(1);
        this.moveZ(1);
        System.out.println("Reached object at initial position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        obj.setPosition(this.getX(), this.getY(), this.getZ());

        // Move to the new Z position
        this.moveZ(4); // Move 4 units along Z-axis (from Z=1 to Z=5)
        obj.setZ(this.getZ()); // Update only the Z coordinate of the object

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        obj.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper();
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object movement completed.");
        System.out.println("Object's final position: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pick up the object at coordinates (0,0,0) and move it to a new X position of (4,0,0)"
    public void moveObjectToNewXPosition() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj = new ObjectHRI(0, 0, 0);
        this.addObject(obj);

        System.out.println("Moving object from (0,0,0) to (4,0,0)");

        // Move to the object's initial position
        this.moveY(-2); // Lower arm to ground level
        System.out.println("Reached object at initial position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        obj.setPosition(this.getX(), this.getY(), this.getZ());

        // Move to the new X position
        this.moveX(4); // Move 4 units along X-axis
        obj.setX(this.getX()); // Update the X coordinate of the object

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        obj.setY(0); // Set object's Y coordinate to 0 (ground level)
        this.openGripper();
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object movement completed.");
        System.out.println("Object's final position: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pick up the object at coordinates (3,0,1) and move it to a new Y position to coordinates (-2,1,-2)"
    public void moveObjectToNew3DPosition() {
        this.returnToOrigin(); // Start from the origin
        ObjectHRI obj = new ObjectHRI(3, 0, 1);
        this.addObject(obj);

        System.out.println("Moving object from (3,0,1) to (-2,1,-2)");

        // Move to the object's initial position
        this.moveX(3);
        this.moveZ(1);
        System.out.println("Reached object at initial position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper();
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        obj.setPosition(this.getX(), this.getY(), this.getZ());

        // Move to the new position
        this.moveX(-5); // Move 5 units left (from 3 to -2)
        this.moveZ(-3); // Move 3 units backward (from 1 to -2)
        this.moveY(-1); // Move 1 unit down (from 2 to 1)

        // Update object's coordinates
        obj.setPosition(this.getX(), this.getY(), this.getZ());

        // Place the object
        this.openGripper();
        this.moveY(1); // Raise the arm back to default height

        this.returnToOrigin(); // Return to origin as per default behavior

        System.out.println("Object movement completed.");
        System.out.println("Object's final position: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // Passed  - 19
    // Failed  - 1



    public static void main(String[] args) {
        Robot r = new Robot();
    }

}