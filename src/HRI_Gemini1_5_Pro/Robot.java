package HRI_Gemini1_5_Pro;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Consumer;


public class Robot {
    private int x;
    private int y;
    private int z;
    protected List<ObjectHRI> objects;
    public boolean gripperIsOpen;
    protected ArrayList<Integer> coords;

    public Robot() {
        this.x = 0;
        this.y = 2;
        this.z = 0;
        this.objects = new ArrayList<>();
        this.gripperIsOpen = true;
        this.coords = new ArrayList<>();
    }

    public Robot(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.objects = new ArrayList<>();
        this.gripperIsOpen = true;
        this.coords = new ArrayList<>();
    }

    public int getX() { return this.x; }
    public int getY() { return this.y; }
    public int getZ() { return this.z; }

    public ArrayList<Integer> getPosition() {
        coords.clear();  // Clear previous coordinates
        coords.add(getX());
        coords.add(getY());
        coords.add(getZ());
        System.out.println("Position: (" + this.x + ", " + this.y + ", " + this.z + ")");
        return coords;
    }

    public void moveX(int distance) {
        int newX = this.x + distance;
        checkCollision(newX, this.y, this.z);
        this.x = newX;
        System.out.println("Robot moved on x axis. New position: (" + this.x + ", " + this.y + ", " + this.z + ")");
    }

    public void moveY(int distance) {
        int newY = this.y + distance;
        checkCollision(this.x, newY, this.z);
        this.y = newY;
        System.out.println("Robot moved on y axis. New position: (" + this.x + ", " + this.y + ", " + this.z + ")");
    }

    public void moveZ(int distance) {
        int newZ = this.z + distance;
        checkCollision(this.x, this.y, newZ);
        this.z = newZ;
        System.out.println("Robot moved on z axis. New position: (" + this.x + ", " + this.y + ", " + this.z + ")");
    }

    private void checkCollision(int newX, int newY, int newZ) {
        System.out.println("Checking collision for position: (" + newX + ", " + newY + ", " + newZ + ")");
        System.out.println("Gripper is " + (gripperIsOpen ? "open" : "closed"));
        if (!gripperIsOpen) {
            for (ObjectHRI obj : objects) {
                System.out.println("Comparing with object at: (" + obj.getX() + ", " + obj.getY() + ", " + obj.getZ() + ")");
                if (newX == obj.getX() && newY == obj.getY() && newZ == obj.getZ()) {
                    throw new IllegalStateException("Collision detected! Cannot move to object coordinates with closed gripper.");
                }
            }
        }
        System.out.println("No collision detected");
    }

    public void openGripper() {
        this.gripperIsOpen = true;
        System.out.println("Gripper opened.");
    }

    public void closeGripper() {
        checkCollision(this.x, this.y, this.z);
        this.gripperIsOpen = false;
        System.out.println("Gripper closed.");
    }

    public void addObject(ObjectHRI obj) {
        this.objects.add(obj);
    }

    public void returnToOrigin() {
        this.x = 0;
        this.y = 2;
        this.z = 0;
        System.out.println("Robot returned to origin (0, 2, 0)");
    }

    // Adding methods generated by Gemini 1.5 Pro

    // "pickup object at (3,0,9). Do not return to origin"
    public void pickupObjectAt3_0_9NoReturn() {
        this.returnToOrigin(); // Ensure the robot starts at the origin
        ObjectHRI o1 = new ObjectHRI(3, 0, 9); // Instantiate the object
        this.addObject(o1); // Add the object to the robot's environment

        this.moveX(3); // Move to object's x-coordinate
        this.moveZ(9); // Move to object's z-coordinate

        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates to match robot's position
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        System.out.println("Object picked up. New position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pickup object that is 7 cm to the left and 4 cm forward of origin"
    public void pickupObjectLeftAndForwardOfOrigin() {
        this.returnToOrigin(); // Ensure the robot starts at the origin
        ObjectHRI o1 = new ObjectHRI(-7, 0, 4); // Object is 7 cm left and 4 cm forward
        this.addObject(o1); // Add the object to the robot's environment

        this.moveX(-7); // Move 7 cm to the left
        this.moveZ(4); // Move 4 cm forward

        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates to match robot's position
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        System.out.println("Object picked up. New position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Did not return to origin

    // "pickup the object situated 2 cm to the right from origin and move it at coordinates (-2,0,2)"
    public void pickupAndMoveObjectToMinus2_0_2() {
        this.returnToOrigin(); // Ensure the robot starts at the origin
        ObjectHRI o1 = new ObjectHRI(2, 0, 0); // Object is 2 cm to the right of the origin
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's initial position
        this.moveX(2); // Move 2 cm to the right

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the target position
        this.moveX(-4); // Move 4 cm to the left to reach x = -2
        o1.setX(this.getX()); // Update the object's x-coordinate
        this.moveZ(2); // Move 2 cm forward to reach z = 2
        o1.setZ(this.getZ()); // Update the object's z-coordinate

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(this.getY()); // Update object's y-coordinate
        this.openGripper(); // Release the object
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin

        System.out.println("Object moved to (-2, 0, 2).");
        System.out.println("Final object position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "place the object situated at (4,0,1) two cm forward on the ground"
    public void placeObjectForward() {
        this.returnToOrigin(); // Ensure the robot starts at the origin
        ObjectHRI o1 = new ObjectHRI(4, 0, 1); // Object is at (4, 0, 1)
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's initial position
        this.moveX(4); // Move 4 cm to the right
        this.moveZ(1); // Move 1 cm forward

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move 2 cm forward
        this.moveZ(2);

        // Update object's coordinates after moving
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        this.openGripper(); // Release the object
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin

        System.out.println("Object placed two cm forward.");
        System.out.println("Final object position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Not updating object coordinates

    // "move 2 cm to the left from origin. pickup the object situated on the ground 3 cm to the right from  your position and place it at coordinates (5,0,5). do not return to origin"
    public void moveLeftPickupAndPlaceNoReturn() {
        this.returnToOrigin(); // Start at the origin
        this.moveX(-2); // Move 2 cm to the left

        // Object is 3 cm to the right of the robot's current position
        ObjectHRI o1 = new ObjectHRI(1, 0, 0);
        this.addObject(o1);

        // Move to the object's position
        this.moveX(3);

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the target position (5, 0, 5)
        this.moveX(4); // Move 4 cm to the right from current position (1, 2, 0) to reach x = 5
        o1.setX(this.getX());
        this.moveZ(5); // Move 5 cm forward
        o1.setZ(this.getZ());

        // Place the object
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        System.out.println("Object moved to (5, 0, 5).");
        System.out.println("Final object position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pickup the object situated 2 cm left from origin and place it on the ground 3 cm right from origin"
    public void pickupLeftAndPlaceRight() {
        this.returnToOrigin(); // Ensure the robot starts at the origin
        ObjectHRI o1 = new ObjectHRI(-2, 0, 0); // Object is 2 cm to the left of the origin
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's initial position
        this.moveX(-2); // Move 2 cm to the left

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the target position (3 cm right of origin)
        this.moveX(5); // Move 5 cm to the right from current position (-2, 2, 0) to reach x = 3
        o1.setX(this.getX()); // Update object's x-coordinate

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(this.getY()); // Update object's y-coordinate
        this.openGripper(); // Release the object
        this.moveY(2); // Raise the arm

        this.returnToOrigin(); // Return to origin

        System.out.println("Object placed 3 cm right of origin.");
        System.out.println("Final object position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Pickup last object placed and place it on the ground 2 cm to the left. do not lift the arm up after placing"
    public void pickupLastObjectAndPlaceLeftNoLift() {
        // Assuming the last object placed is at (3, 0, 0) based on the previous instruction
        ObjectHRI o1 = new ObjectHRI(3, 0, 0);
        this.addObject(o1);

        // Move to the object's position
        this.moveX(3); // Move 3 cm to the right

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.moveY(-2); // Lower arm to ground level
        this.closeGripper(); // Grip the object
        this.moveY(2); // Lift the object

        // Update object's coordinates after lifting
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move 2 cm to the left
        this.moveX(-2);
        o1.setX(this.getX());

        // Place the object
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(this.getY()); // Update object's y-coordinate
        this.openGripper(); // Release the object


        System.out.println("Object placed 2 cm to the left.");
        System.out.println("Final object position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "place the object situated at (2,1,2) on the ground 4 cm to the left. Do not return to origin"
    public void placeObjectLeftNoReturn() {
        this.returnToOrigin(); // Ensure the robot starts at the origin
        ObjectHRI o1 = new ObjectHRI(2, 1, 2); // Object is at (2, 1, 2)
        this.addObject(o1); // Add the object to the robot's environment

        // Move to the object's initial position
        this.moveX(2); // Move 2 cm to the right
        this.moveZ(2); // Move 2 cm forward
        this.moveY(1); // Move 1 cm upwards

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper(); // Open gripper if it's closed
        }
        this.closeGripper(); // Grip the object
        this.moveY(-1); // Lower object to match robot's starting height

        // Update object's coordinates after picking it up
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move 4 cm to the left
        this.moveX(-4);

        // Update object's coordinates after moving
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Place the object on the ground
        this.moveY(-2); // Lower the arm to ground level
        o1.setY(this.getY()); // Update object's Y coordinate
        this.openGripper(); // Release the object

        System.out.println("Object placed 4 cm to the left.");
        System.out.println("Final object position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Incorrect object handling

    // "Take the object at (1,0,1) and place it at (2,0,1). Then take another object at (3,0,3) and place it one cm to the right"
    public void moveTwoObjectsSequentially() {
        this.returnToOrigin(); // Start at the origin

        // First object
        ObjectHRI o1 = new ObjectHRI(1, 0, 1);
        this.addObject(o1);
        this.moveX(1);
        this.moveZ(1);
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());
        this.moveX(1);
        o1.setX(this.getX());
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        // Second object
        ObjectHRI o2 = new ObjectHRI(3, 0, 3);
        this.addObject(o2);
        this.moveX(1);
        this.moveZ(2);
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o2.setX(this.getX());
        o2.setY(this.getY());
        o2.setZ(this.getZ());
        this.moveX(1);
        o2.setX(this.getX());
        this.moveY(-2);
        o2.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Objects placed.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Final o2 position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Take one object situated at (4,0,2) and place it on top of the object situated at cords (-2,0,3)"
    public void stackObjects() {
        this.returnToOrigin(); // Start at the origin

        // First object
        ObjectHRI o1 = new ObjectHRI(4, 0, 2);
        this.addObject(o1);
        this.moveX(4);
        this.moveZ(2);
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Second object
        ObjectHRI o2 = new ObjectHRI(-2, 0, 3);
        this.addObject(o2);
        this.moveX(-6); // Move to x = -2
        o1.setX(this.getX());
        this.moveZ(1);  // Move to z = 3
        o1.setZ(this.getZ());
        this.moveY(-2); // Lower the first object to ground level
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Objects stacked.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Final o2 position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Caused collision between o1 and o2

    // "pickup the object at (-2,0,2) and move it to coordinates (3,0,2). Then pick it up again and move it 2 cm to the left"
    public void pickupMovePickupMoveLeft() {
        this.returnToOrigin(); // Start at the origin

        // Object
        ObjectHRI o1 = new ObjectHRI(-2, 0, 2);
        this.addObject(o1);

        // Go to object
        this.moveX(-2);
        this.moveZ(2);

        // Pickup object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to (3,0,2)
        this.moveX(5);
        o1.setX(this.getX());

        // Place object
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        // Pick up object again
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setY(this.getY());

        // Move 2 cm to the left
        this.moveX(-2);
        o1.setX(this.getX());

        // Place object
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Object moved.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Pickup the object 4 cm to the left and place it at coordinates (4,3,2)"
    public void pickupLeftPlaceAt4_3_2() {
        this.returnToOrigin(); // Start at the origin

        // Object
        ObjectHRI o1 = new ObjectHRI(-4, 0, 0);
        this.addObject(o1);

        // Go to object
        this.moveX(-4);

        // Pickup object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to (4,3,2)
        this.moveX(8);
        o1.setX(this.getX());
        this.moveY(1);
        o1.setY(this.getY());
        this.moveZ(2);
        o1.setZ(this.getZ());

        // Place object
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Object moved.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Incorrect Y coordinates

    // "From origin, draw a square in the air with a side length of 3"
    // LLM output: "This task is outside of the scope of the robot's capabilities as defined in the provided documentation. The robot is designed to interact with objects in a 3D space by picking up, moving, and placing them. It does not have the functionality to draw shapes in the air."
    public void drawSquare() {
        System.out.println("This task is outside of the scope of the robot's capabilities as defined in the provided documentation. The robot is designed to interact with objects in a 3D space by picking up, moving, and placing them. It does not have the functionality to draw shapes in the air.");
    }
    // Failed.

    // "There are 3 objects. First is  at coordinates (3,0,1), second is at (4,0,2) and third at (-2,0,2). I want you to pick them and place them on top of each other at coordinates (-5,0,5). The gripper can only hold one object at a time."
    public void stackThreeObjects() {
        this.returnToOrigin(); // Start at the origin

        // Object 1
        ObjectHRI o1 = new ObjectHRI(3, 0, 1);
        this.addObject(o1);
        this.moveX(3);
        this.moveZ(1);
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to stacking position
        this.moveX(-8); // Move to x = -5
        o1.setX(this.getX());
        this.moveZ(4); // Move to z = 5
        o1.setZ(this.getZ());
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        // Object 2
        ObjectHRI o2 = new ObjectHRI(4, 0, 2);
        this.addObject(o2);
        this.moveX(9); // Move to x = 4
        this.moveZ(-3); // Move to z = 2
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o2.setX(this.getX());
        o2.setY(this.getY());
        o2.setZ(this.getZ());

        // Move to stacking position
        this.moveX(-9); // Move to x = -5
        o2.setX(this.getX());
        this.moveZ(3); // Move to z = 5
        o2.setZ(this.getZ());
        this.moveY(-2);
        o2.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        // Object 3
        ObjectHRI o3 = new ObjectHRI(-2, 0, 2);
        this.addObject(o3);
        this.moveX(-3); // Move to x = -2
        this.moveZ(0); // Move to z = 2
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o3.setX(this.getX());
        o3.setY(this.getY());
        o3.setZ(this.getZ());

        // Move to stacking position
        this.moveX(-3); // Move to x = -5
        o3.setX(this.getX());
        this.moveZ(3); // Move to z = 5
        o3.setZ(this.getZ());
        this.moveY(-2);
        o3.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Objects stacked at (-5,0,5).");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Final o2 position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Final o3 position: (" + o3.getX() + ", " + o3.getY() + ", " + o3.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Colliding objects

    // "There are 2 objects at coordinates (3,0,2) and (-3,0,2). Can you swap them around"
    public void swapObjects() {
        this.returnToOrigin(); // Start at the origin

        // Object 1
        ObjectHRI o1 = new ObjectHRI(3, 0, 2);
        this.addObject(o1);

        // Object 2
        ObjectHRI o2 = new ObjectHRI(-3, 0, 2);
        this.addObject(o2);

        // Pick up the first object
        this.moveX(3);
        this.moveZ(2);
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to a temporary position
        this.moveY(1);
        o1.setY(this.getY());
        this.moveX(-4);
        o1.setX(this.getX());

        // Place the first object temporarily
        this.moveY(-1);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(1);

        // Pick up the second object
        this.moveX(-2);
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o2.setX(this.getX());
        o2.setY(this.getY());
        o2.setZ(this.getZ());

        // Move the second object to the first object's original position
        this.moveX(6);
        o2.setX(this.getX());
        this.moveY(-2);
        o2.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        // Pick up the first object from the temporary position
        this.moveX(-4);
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move the first object to the second object's original position
        this.moveX(-2);
        o1.setX(this.getX());
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Objects swapped.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Final o2 position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "Pickup the last two objects moved and place them on top of each other at coords (-5,0,7)"
    public void stackLastTwoObjects() {
        this.returnToOrigin(); // Start at the origin

        // Assuming the last two objects are at (-3, 0, 2) and (3, 0, 2) based on the previous instruction

        // Object 1
        ObjectHRI o1 = new ObjectHRI(-3, 0, 2);
        this.addObject(o1);

        // Object 2
        ObjectHRI o2 = new ObjectHRI(3, 0, 2);
        this.addObject(o2);

        // Pick up the first object
        this.moveX(-3);
        this.moveZ(2);
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to stacking position
        this.moveX(-2); // Move to x = -5
        o1.setX(this.getX());
        this.moveZ(5); // Move to z = 7
        o1.setZ(this.getZ());
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        // Pick up the second object
        this.moveX(8); // Move to x = 3
        this.moveZ(-2); // Move to z = 5
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o2.setX(this.getX());
        o2.setY(this.getY());
        o2.setZ(this.getZ());

        // Move to stacking position
        this.moveX(-8); // Move to x = -5
        o2.setX(this.getX());
        this.moveZ(2); // Move to z = 7
        o2.setZ(this.getZ());
        this.moveY(-2);
        o2.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Objects stacked at (-5,0,7).");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Final o2 position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Failed. Colliding objects

    // "Move the objects at coordinates (1,0,1) and (-2,0,1) to a new position where they will be placed at (5,0,5) and (6,0,5)"
    public void moveTwoObjectsToNewPositions() {
        this.returnToOrigin(); // Start at the origin

        // Object 1
        ObjectHRI o1 = new ObjectHRI(1, 0, 1);
        this.addObject(o1);

        // Object 2
        ObjectHRI o2 = new ObjectHRI(-2, 0, 1);
        this.addObject(o2);

        // Move to and pick up the first object
        this.moveX(1);
        this.moveZ(1);
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the first object's new position
        this.moveX(4);
        o1.setX(this.getX());
        this.moveZ(4);
        o1.setZ(this.getZ());

        // Place the first object
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        // Move to and pick up the second object
        this.moveX(-7);
        this.moveZ(0);
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o2.setX(this.getX());
        o2.setY(this.getY());
        o2.setZ(this.getZ());

        // Move to the second object's new position
        this.moveX(8);
        o2.setX(this.getX());
        this.moveZ(4);
        o2.setZ(this.getZ());

        // Place the second object
        this.moveY(-2);
        o2.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Objects moved to new positions.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Final o2 position: (" + o2.getX() + ", " + o2.getY() + ", " + o2.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pickup the object at (1,0,1) and move it to a new Z position at (1,0,5)"
    public void moveObjectToNewZPosition() {
        this.returnToOrigin(); // Start at the origin

        // Object
        ObjectHRI o1 = new ObjectHRI(1, 0, 1);
        this.addObject(o1);

        // Move to the object
        this.moveX(1);
        this.moveZ(1);

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the new Z position
        this.moveZ(4); // Move 4 units forward
        o1.setZ(this.getZ());

        // Place the object
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Object moved to new Z position.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pick up the object at coordinates (0,0,0) and move it to a new X position of (4,0,0)."
    public void moveObjectToNewXPosition() {
        this.returnToOrigin(); // Start at the origin

        // Object
        ObjectHRI o1 = new ObjectHRI(0, 0, 0);
        this.addObject(o1);

        // Since the object is at the origin, the robot is already in position
        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the new X position
        this.moveX(4); // Move 4 units to the right
        o1.setX(this.getX());

        // Place the object
        this.moveY(-2);
        o1.setY(this.getY());
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Object moved to new X position.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed

    // "pick up the object at coordinates (3,0,1) and move it to a new Y position to coordinates (-2,1,-2)"
    public void moveObjectToNewYPosition() {
        this.returnToOrigin(); // Start at the origin

        // Object
        ObjectHRI o1 = new ObjectHRI(3, 0, 1);
        this.addObject(o1);

        // Move to the object
        this.moveX(3);
        this.moveZ(1);

        // Pick up the object
        if (!this.gripperIsOpen) {
            this.openGripper();
        }
        this.moveY(-2);
        this.closeGripper();
        this.moveY(2);
        o1.setX(this.getX());
        o1.setY(this.getY());
        o1.setZ(this.getZ());

        // Move to the new X and Z position
        this.moveX(-5); // Move 5 units to the left
        o1.setX(this.getX());
        this.moveZ(-3); // Move 3 units backward
        o1.setZ(this.getZ());

        // Move to the new Y position
        this.moveY(-1); // Move 1 unit down
        o1.setY(this.getY());

        // Place the object
        this.openGripper();
        this.moveY(2);

        this.returnToOrigin();

        System.out.println("Object moved to new Y position.");
        System.out.println("Final o1 position: (" + o1.getX() + ", " + o1.getY() + ", " + o1.getZ() + ")");
        System.out.println("Robot's final position: (" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ")");
    }
    // Passed


    // Tests passed: 12
    // Tests failed: 8


    // Main method to create a robot instance
    public static void main(String[] args) {
        Robot r = new Robot();
    }
}